<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oDynamicParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>direction = 180
Acceleration = 0.2
MaxSpeed = 8
MaxReverseSpeed = -5
BrakingDeceleration = 0.2
NoControlDeceleration = 0.1
MaxTurnAngle = 4

/* state machines */
STOP = 0
MOVING = 1
NO_ACCEL_DECEL = 2

state_ = STOP
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/* on create 
Acceleration
MaxSpeed
MaxReverseSpeed
TurnAngle
list of states data types &gt;&gt; state_
*/

/* movement */
TurnAngle = speed
if TurnAngle &gt;= MaxTurnAngle {
    TurnAngle = MaxTurnAngle
}
switch state_ {
    case STOP:
        if keyboard_check(ord('W')) {
            state_ = MOVING
            speed = speed + Acceleration
        }
        if keyboard_check(ord('S')) {
            state_ = MOVING
            if speed &gt;= MaxReverseSpeed {
                speed = speed - Acceleration
            }
        }
        break
        
    case MOVING:
        if keyboard_check(ord('W')) {
            if speed &lt;= MaxSpeed {
                speed = speed + Acceleration
            }
        }
        if keyboard_check(ord('A')) {
            direction = direction + TurnAngle
            image_angle = image_angle + TurnAngle
        }
        if keyboard_check(ord('D')) {
            direction = direction - TurnAngle
            image_angle = image_angle - TurnAngle
        }
        if (keyboard_check(ord('A')) &amp;&amp; !keyboard_check(ord('W')) &amp;&amp; !keyboard_check(ord('S'))) {
            state_ = NO_ACCEL_DECEL
            break
        }
        if (keyboard_check(ord('D')) &amp;&amp; !keyboard_check(ord('W')) &amp;&amp; !keyboard_check(ord('S'))) {
            state_ = NO_ACCEL_DECEL
            break
        }
        if keyboard_check(ord('S')) {
            if speed == 0 {
                state_ = STOP
                break
            }
            if speed &gt;= MaxReverseSpeed {
                speed = speed - Acceleration
            }
        }
        if keyboard_check(vk_nokey) {
            state_ = NO_ACCEL_DECEL
            break
        }
        break
        
    case NO_ACCEL_DECEL:
        if speed == 0 {
            state_ = STOP
            break
        }
        if speed &gt; 0 {
        speed = speed - NoControlDeceleration
        }
        if speed &lt; 0 {
        speed = speed + NoControlDeceleration
        }
        if keyboard_check(ord('A')) {
            direction = direction + TurnAngle
            image_angle = image_angle + TurnAngle
        }
        if keyboard_check(ord('D')) {
            direction = direction - TurnAngle
            image_angle = image_angle - TurnAngle
        }
        if keyboard_check(ord('W')) || keyboard_check(ord('S')) {
            state_ = MOVING
            break
        }    
        break
        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>-1</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>0</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>-0.5,0</point>
    <point>72,0</point>
    <point>72,120</point>
    <point>0,120</point>
  </PhysicsShapePoints>
</object>
